import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;

import javax.swing.*;

public class ATM 
{
    static class BankAccount 
    {
        double balance;

        public BankAccount(double initialBalance) 
        {
            balance = initialBalance;
        }

        public void deposit(double amount) 
        {
            balance += amount;
        }

        public int withdraw(double amount) 
        {
            if (amount <= balance) 
            {
                balance -= amount;
                return 1;
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "Insufficient funds. Withdrawal failed.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                return 0;
            }
        }
    }

    static BankAccount user = new BankAccount(3000.00);

    public static void main(String[] args) 
    {
        JFrame frame = new JFrame("ATM INTERFACE");
        JPanel mainPanel = new JPanel(new BorderLayout());
        JTextArea outputArea = new JTextArea(10, 40);
        outputArea.setEditable(false);
        outputArea.setBackground(new Color(150, 200, 200));
        outputArea.setForeground(Color.BLACK);
        outputArea.setFont(new Font("SansSerif", Font.BOLD, 14));
        outputArea.append("Welcome to the ATM\n");
        JScrollPane scrollPane = new JScrollPane(outputArea);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        JPanel inputPanel = new JPanel();
        JComboBox<String> optionsDropDown = new JComboBox<>(
                new String[] { "Withdraw", "Deposit", "Check Balance", "Exit" });
        JTextField amountField = new JTextField(10);
        JButton button = new JButton("Execute");

        button.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                String selectedOption = (String) optionsDropDown.getSelectedItem();
                switch (selectedOption) {
                    case "Withdraw":
                        handleWithdraw(amountField.getText());
                        break;
                    case "Deposit":
                        handleDeposit(amountField.getText());
                        break;
                    case "Check Balance":
                        handleCheckBalance();
                        break;
                    case "Exit":
                        handleExit();
                        break;
                    default:
                        break;
                }
            }
        });

        inputPanel.add(new JLabel("Select Option:"));
        inputPanel.add(optionsDropDown);
        inputPanel.add(new JLabel("Amount:"));
        inputPanel.add(amountField);
        inputPanel.add(button);

        mainPanel.add(inputPanel, BorderLayout.SOUTH);
        frame.add(mainPanel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    private static void handleWithdraw(String amountText) 
    {
        try 
        {
            double amount = Double.parseDouble(amountText);
            if (amount > 0) 
            {
                if (user.withdraw(amount) == 1) 
                {
                    JOptionPane.showMessageDialog(null,
                            "Withdrawal successful. Remaining balance: $" + formatCurrency(user.balance));
                } 
                else 
                {
                    JOptionPane.showMessageDialog(null, "Insufficient funds. Withdrawal failed.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "Invalid amount. Please enter a positive value.", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } 
        catch (NumberFormatException e) 
        {
            JOptionPane.showMessageDialog(null, "Invalid amount. Please enter a positive value.", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private static void handleDeposit(String amountText) 
    {
        try 
        {
            double amount = Double.parseDouble(amountText);
            if (amount > 0) 
            {
                user.deposit(amount);
                JOptionPane.showMessageDialog(null,
                        "Deposit successful. Remaining balance: $" + formatCurrency(user.balance));
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "Invalid amount. Please enter a positive value.", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } 
        catch (NumberFormatException e) 
        {
            JOptionPane.showMessageDialog(null, "Invalid amount. Please enter a positive value.", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private static void handleCheckBalance() 
    {
        JOptionPane.showMessageDialog(null, "Current Balance: $" + formatCurrency(user.balance),
                "Balance Verified Successfully", JOptionPane.INFORMATION_MESSAGE);
    }

    private static void handleExit() 
    {
        JOptionPane.showMessageDialog(null, "Exiting. Thank You!", "Exit", JOptionPane.INFORMATION_MESSAGE);
        System.exit(0);
    }

    private static String formatCurrency(double amount) 
    {
        DecimalFormat currencyFormat = new DecimalFormat("#,###.00");
        return currencyFormat.format(amount);
    }
}
